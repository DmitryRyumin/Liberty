#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Заглушка
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
import sys       # Доступ к некоторым переменным и функциям Python
import platform  # Информация об операционной системе

from datetime import datetime  # Работа со временем

# Персональные
from liberty.modules.core import config as cfg  # Глобальный файл настроек


# ######################################################################################################################
# Сообщения
# ######################################################################################################################
class Messages(cfg.Messages):
    """Класс для сообщений"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self._requires_os = self._('[{}{}{}] Требуется операционная система Windows') + ' >= {}.{} ...'


# ######################################################################################################################
# Заглушка
# ######################################################################################################################
class Cap(Messages):
    """Заглушка"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self.__min_os_windows = (8, 0)  # Минимальная версия Windows

    # ------------------------------------------------------------------------------------------------------------------
    #  Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Windows 8 или новее
    def win8_later(self, out = True):
        """
        Windows 8 или новее

        ( [, bool]) -> bool

        Аргументы:
            out - Печатать процесс выполнения

        Возвращает: True если Windows 8 или новее, в обратном случае False
        """

        # Проверка аргументов
        if type(out) is not bool:
            return False

        if sys.platform != 'win32' or int(platform.version().split('.')[0]) < self.__min_os_windows[0]:
            # Вывод сообщения
            if out is True:
                print(self._requires_os.format(
                    self.red, datetime.now().strftime(self._format_time), self.end,
                    self.__min_os_windows[0], self.__min_os_windows[1]
                ))

            return False

        return True
