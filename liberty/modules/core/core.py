#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Ядро
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
import argparse  # Парсинг аргументов и параметров командной строки

from datetime import datetime  # Работа со временем

# Персональные
from liberty.modules.core import config as cfg  # Глобальный файл настроек
from liberty.modules.trml.shell import Shell    # Работа с Shell


# ######################################################################################################################
# Ядро модулей
# ######################################################################################################################
class Core(cfg.Messages):
    """Ядро модулей"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self._ap = None  # Парсер для параметров командной строки

        self._args = None  # Аргументы командной строки

    # ------------------------------------------------------------------------------------------------------------------
    # Внутренние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Неверные типы аргументов
    def _inv_args(self, class_name, build_name):
        """
        Построение аргументов командной строки

        (str, str) -> None

        Аргументы:
           class_name - Имя класса
           build_name - Имя метода/функции
        """

        print(self._invalid_arguments.format(
            self.red, datetime.now().strftime(self._format_time),
            self.end, class_name + '.' + build_name
        ))

    # ------------------------------------------------------------------------------------------------------------------
    # Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Построение аргументов командной строки
    def build_args(self, description, conv_to_dict = True, out = True):
        """
        Построение аргументов командной строки

        (str [, bool, bool]) -> None or dict

        Аргументы:
           description  - Описание парсера командной строки
           conv_to_dict - Преобразование списка аргументов командной строки в словарь

        Возвращает: dict если парсер командной строки окончательный, в обратном случае None
        """

        # Проверка аргументов
        if type(description) is not str or not description or type(conv_to_dict) is not bool or type(out) is not bool:
            # Вывод сообщения
            if out is True:
                self._inv_args(__class__.__name__, self.build_args.__name__)

            return None

        # Парсер для параметров командной строки
        self._ap = argparse.ArgumentParser(description = description)

        if conv_to_dict is True:
            return vars(self._ap.parse_args())  # Преобразование списка аргументов командной строки в словарь

    # Очистка консоли
    def clear_shell(self, cls = True, out = True):
        """
        Очистка консоли

        (bool [, bool]) -> None

        Аргументы:
           cls - Вариант очистки консоли
           out - Печатать процесс выполнения
        """

        # Проверка аргументов
        if type(cls) is not bool or type(out) is not bool:
            # Вывод сообщения
            if out is True:
                self._inv_args(__class__.__name__, self.clear_shell.__name__)

            return False

        if cls is True:
            Shell.clear()  # Очистка консоли
